<?xml version="1.0" encoding="utf-8"?>
<WorkflowBuilder Version="2.8.5"
                 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                 xmlns:rx="clr-namespace:Bonsai.Reactive;assembly=Bonsai.Core"
                 xmlns:p1="clr-namespace:Bonsai.uEye;assembly=Bonsai.uEye"
                 xmlns:dsp="clr-namespace:Bonsai.Dsp;assembly=Bonsai.Dsp"
                 xmlns:cv="clr-namespace:Bonsai.Vision;assembly=Bonsai.Vision"
                 xmlns:ipy="clr-namespace:Bonsai.Scripting.IronPython;assembly=Bonsai.Scripting.IronPython"
                 xmlns:io="clr-namespace:Bonsai.IO;assembly=Bonsai.System"
                 xmlns:wie="clr-namespace:Bonsai.Windows.Input;assembly=Bonsai.Windows.Input"
                 xmlns:p2="clr-namespace:System.Windows.Forms;assembly=System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
                 xmlns:gl="clr-namespace:Bonsai.Shaders;assembly=Bonsai.Shaders"
                 xmlns:sys="clr-namespace:System;assembly=mscorlib"
                 xmlns:res="clr-namespace:Bonsai.Resources;assembly=Bonsai.System"
                 xmlns="https://bonsai-rx.org/2018/workflow">
  <Workflow>
    <Nodes>
      <Expression xsi:type="rx:Defer">
        <Name>IDS image</Name>
        <Workflow>
          <Nodes>
            <Expression xsi:type="ExternalizedMapping">
              <Property Name="ConfigFile" />
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="p1:uEyeCapture">
                <p1:DeviceId xsi:nil="true" />
                <p1:ConfigFile>C:\Users\Experimenter\Documents\bonsai_zfshoaling\calibrateCamera\2048x1380_10fps_slowClock_4.92.ini</p1:ConfigFile>
              </Combinator>
            </Expression>
            <Expression xsi:type="MemberSelector">
              <Selector>Image</Selector>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="dsp:RunningAverage">
                <dsp:Alpha>0.2</dsp:Alpha>
              </Combinator>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="cv:BackgroundSubtraction">
                <cv:BackgroundFrames>10</cv:BackgroundFrames>
                <cv:AdaptationRate>0.01</cv:AdaptationRate>
                <cv:ThresholdValue>91</cv:ThresholdValue>
                <cv:ThresholdType>Truncate</cv:ThresholdType>
                <cv:SubtractionMethod>Dark</cv:SubtractionMethod>
              </Combinator>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="cv:Threshold">
                <cv:ThresholdValue>9</cv:ThresholdValue>
                <cv:MaxValue>255</cv:MaxValue>
                <cv:ThresholdType>Binary</cv:ThresholdType>
              </Combinator>
            </Expression>
            <Expression xsi:type="WorkflowOutput" />
          </Nodes>
          <Edges>
            <Edge From="0" To="1" Label="Source1" />
            <Edge From="1" To="2" Label="Source1" />
            <Edge From="2" To="3" Label="Source1" />
            <Edge From="3" To="4" Label="Source1" />
            <Edge From="4" To="5" Label="Source1" />
            <Edge From="5" To="6" Label="Source1" />
          </Edges>
        </Workflow>
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="cv:FindContours">
          <cv:Mode>External</cv:Mode>
          <cv:Method>ChainApproxNone</cv:Method>
          <cv:Offset>
            <cv:X>0</cv:X>
            <cv:Y>0</cv:Y>
          </cv:Offset>
          <cv:MinArea>50</cv:MinArea>
          <cv:MaxArea xsi:nil="true" />
        </Combinator>
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="cv:BinaryRegionAnalysis" />
      </Expression>
      <Expression xsi:type="ipy:PythonTransform">
        <ipy:Name>SortContours</ipy:Name>
        <ipy:Script>import clr
clr.AddReference("Bonsai.Vision")
from Bonsai.Vision import ConnectedComponent
from System.Collections.Generic import IList
from System import Tuple

@returns(Tuple[list,str])

def process(value):

  tupRoundAll=[]
  for c in value:

    y=c.Centroid.Y
    yr=(int(y/500)*500)
    x=c.Centroid.X
    xr=(int(x/1000)*1000)
    
    tupRoundAll.append((yr,xr))
  
  so=[i[0] for i in sorted(enumerate(tupRoundAll), key=lambda x:x[1])]

  s=[value[i] for i in so]





  ss=[str(x.Centroid.X)+","+str(x.Centroid.Y) for x in s]

  return Tuple.Create(s," ".join(ss))</ipy:Script>
      </Expression>
      <Expression xsi:type="MemberSelector">
        <Selector>Item1</Selector>
      </Expression>
      <Expression xsi:type="rx:Defer">
        <Name>ROI File</Name>
        <Workflow>
          <Nodes>
            <Expression xsi:type="ExternalizedMapping">
              <Property Name="FileName" />
            </Expression>
            <Expression xsi:type="io:CsvReader">
              <io:FileName>E:\00_bonsai_ffmpeg_out\ROIdef2025-01-27T10_52_11.csv</io:FileName>
              <io:ScanPattern>%i,%i,%i,%i,%i,%i</io:ScanPattern>
              <io:SkipRows>0</io:SkipRows>
            </Expression>
            <Expression xsi:type="WorkflowOutput" />
          </Nodes>
          <Edges>
            <Edge From="0" To="1" Label="Source1" />
            <Edge From="1" To="2" Label="Source1" />
          </Edges>
        </Workflow>
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="rx:ToList" />
      </Expression>
      <Expression xsi:type="ipy:PythonTransform">
        <ipy:Script>@returns(list)

def process(value):

  #keep=[0,2,6,8]
  #keep = [8,12,22,26]
  #keep = [1,5,28,34]

  #keep = [0,4,10,14] #15 dish configuration
  keep = [6,8,11,13] #alternative 15 dish configuration

  return [value[i] for i in keep]</ipy:Script>
      </Expression>
      <Expression xsi:type="rx:Defer">
        <Name>DrawProps</Name>
        <Workflow>
          <Nodes>
            <Expression xsi:type="ExternalizedMapping">
              <Property Name="Value" DisplayName="xscale" />
            </Expression>
            <Expression xsi:type="rx:Defer">
              <Workflow>
                <Nodes>
                  <Expression xsi:type="ExternalizedMapping">
                    <Property Name="Value" />
                  </Expression>
                  <Expression xsi:type="Combinator">
                    <Combinator xsi:type="DoubleProperty">
                      <Value>1</Value>
                    </Combinator>
                  </Expression>
                  <Expression xsi:type="WorkflowOutput" />
                </Nodes>
                <Edges>
                  <Edge From="0" To="1" Label="Source1" />
                  <Edge From="1" To="2" Label="Source1" />
                </Edges>
              </Workflow>
            </Expression>
            <Expression xsi:type="ExternalizedMapping">
              <Property Name="Value" DisplayName="xshift" />
            </Expression>
            <Expression xsi:type="rx:Defer">
              <Workflow>
                <Nodes>
                  <Expression xsi:type="ExternalizedMapping">
                    <Property Name="Value" />
                  </Expression>
                  <Expression xsi:type="Combinator">
                    <Combinator xsi:type="DoubleProperty">
                      <Value>0</Value>
                    </Combinator>
                  </Expression>
                  <Expression xsi:type="WorkflowOutput" />
                </Nodes>
                <Edges>
                  <Edge From="0" To="1" Label="Source1" />
                  <Edge From="1" To="2" Label="Source1" />
                </Edges>
              </Workflow>
            </Expression>
            <Expression xsi:type="ExternalizedMapping">
              <Property Name="Value" DisplayName="yscale" />
            </Expression>
            <Expression xsi:type="rx:Defer">
              <Workflow>
                <Nodes>
                  <Expression xsi:type="ExternalizedMapping">
                    <Property Name="Value" />
                  </Expression>
                  <Expression xsi:type="Combinator">
                    <Combinator xsi:type="DoubleProperty">
                      <Value>1</Value>
                    </Combinator>
                  </Expression>
                  <Expression xsi:type="WorkflowOutput" />
                </Nodes>
                <Edges>
                  <Edge From="0" To="1" Label="Source1" />
                  <Edge From="1" To="2" Label="Source1" />
                </Edges>
              </Workflow>
            </Expression>
            <Expression xsi:type="ExternalizedMapping">
              <Property Name="Value" DisplayName="yshift" />
            </Expression>
            <Expression xsi:type="rx:Defer">
              <Workflow>
                <Nodes>
                  <Expression xsi:type="ExternalizedMapping">
                    <Property Name="Value" />
                  </Expression>
                  <Expression xsi:type="Combinator">
                    <Combinator xsi:type="DoubleProperty">
                      <Value>0</Value>
                    </Combinator>
                  </Expression>
                  <Expression xsi:type="WorkflowOutput" />
                </Nodes>
                <Edges>
                  <Edge From="0" To="1" Label="Source1" />
                  <Edge From="1" To="2" Label="Source1" />
                </Edges>
              </Workflow>
            </Expression>
            <Expression xsi:type="ExternalizedMapping">
              <Property Name="Value" DisplayName="lgSize" />
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="IntProperty">
                <Value>20</Value>
              </Combinator>
            </Expression>
            <Expression xsi:type="ExternalizedMapping">
              <Property Name="Value" DisplayName="smSize" />
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="IntProperty">
                <Value>3</Value>
              </Combinator>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="rx:CombineLatest" />
            </Expression>
            <Expression xsi:type="WorkflowOutput" />
          </Nodes>
          <Edges>
            <Edge From="0" To="1" Label="Source1" />
            <Edge From="1" To="12" Label="Source1" />
            <Edge From="2" To="3" Label="Source1" />
            <Edge From="3" To="12" Label="Source2" />
            <Edge From="4" To="5" Label="Source1" />
            <Edge From="5" To="12" Label="Source3" />
            <Edge From="6" To="7" Label="Source1" />
            <Edge From="7" To="12" Label="Source4" />
            <Edge From="8" To="9" Label="Source1" />
            <Edge From="9" To="12" Label="Source5" />
            <Edge From="10" To="11" Label="Source1" />
            <Edge From="11" To="12" Label="Source6" />
            <Edge From="12" To="13" Label="Source1" />
          </Edges>
        </Workflow>
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="rx:CombineLatest" />
      </Expression>
      <Expression xsi:type="ipy:PythonTransform">
        <ipy:Script>import sys
import traceback
import clr
clr.AddReference("OpenTK")
clr.AddReference("OpenCV.Net")
from System.Collections.Generic import IList
from OpenCV.Net import CV, Point2f, Mat,Depth

sys.path.append('C:\\Users\\Experimenter\\Documents\\bonsai_embeddedbehavior\\calibrate\\lib')
import test
#hello Deeksha

#placeholder initial transform used until first 4 dots are detected
transformationMatrixStringOld='0.20204089 0.00400275 855.42237344 -0.01666068 0.35192134 655.85233936 -0.00001107 0.00000618 1.00000000'


@returns(str)
def process(value):
  global transformationMatrixStringOld


  detected=value.Item1

  if len(value.Item1)==4:
    projected=value.Item2
    projectionProps=value.Item3

    #format dot coordinates into .Net data types
    dst, src, transformationMatrix = test.prepVariables(projected,detected,projectionProps)
    
    #obtain transform
    CV.GetPerspectiveTransform(src,dst,transformationMatrix)

    #format transform back into python (string) data type
    transformationMatrixList=test.MatToList(transformationMatrix)
    transformationMatrixString=" ".join(transformationMatrixList)

    #update old transform
    transformationMatrixStringOld=transformationMatrixString

  #if no 4 dots are detected, re-use transformationMatrix from last frame with 4 dots
  else:
      transformationMatrixString=transformationMatrixStringOld

  print transformationMatrixString
  return transformationMatrixString</ipy:Script>
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="wie:KeyDown">
          <wie:Filter>A</wie:Filter>
          <wie:SuppressRepetitions>false</wie:SuppressRepetitions>
        </Combinator>
      </Expression>
      <Expression xsi:type="Equal">
        <Operand xsi:type="WorkflowProperty" TypeArguments="p2:Keys">
          <Value>A</Value>
        </Operand>
      </Expression>
      <Expression xsi:type="PropertyMapping">
        <PropertyMappings>
          <Property Name="Value" />
        </PropertyMappings>
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="BooleanProperty">
          <Value>false</Value>
        </Combinator>
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="rx:CombineLatest" />
      </Expression>
      <Expression xsi:type="rx:Condition">
        <Workflow>
          <Nodes>
            <Expression xsi:type="WorkflowInput">
              <Name>Source1</Name>
            </Expression>
            <Expression xsi:type="MemberSelector">
              <Selector>Item2</Selector>
            </Expression>
            <Expression xsi:type="WorkflowOutput" />
          </Nodes>
          <Edges>
            <Edge From="0" To="1" Label="Source1" />
            <Edge From="1" To="2" Label="Source1" />
          </Edges>
        </Workflow>
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="rx:Take">
          <rx:Count>1</rx:Count>
        </Combinator>
      </Expression>
      <Expression xsi:type="MemberSelector">
        <Selector>Item1</Selector>
      </Expression>
      <Expression xsi:type="io:CsvWriter">
        <io:FileName>E:\00_bonsai_ffmpeg_out\calibrationOut.csv</io:FileName>
        <io:Append>true</io:Append>
        <io:Overwrite>false</io:Overwrite>
        <io:Suffix>Timestamp</io:Suffix>
        <io:IncludeHeader>false</io:IncludeHeader>
        <io:Selector>it</io:Selector>
      </Expression>
      <Expression xsi:type="MemberSelector">
        <Selector>Item2</Selector>
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="gl:RenderFrame" />
      </Expression>
      <Expression xsi:type="rx:Defer">
        <Name>drawTiming</Name>
        <Workflow>
          <Nodes>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="rx:Timer">
                <rx:DueTime>PT0S</rx:DueTime>
                <rx:Period>PT2S</rx:Period>
              </Combinator>
            </Expression>
            <Expression xsi:type="Mod">
              <Operand xsi:type="WorkflowProperty" TypeArguments="sys:Int64">
                <Value>2</Value>
              </Operand>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="FloatProperty">
                <Value>0</Value>
              </Combinator>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="rx:CombineLatest" />
            </Expression>
            <Expression xsi:type="Equal" />
            <Expression xsi:type="WorkflowOutput" />
          </Nodes>
          <Edges>
            <Edge From="0" To="1" Label="Source1" />
            <Edge From="1" To="3" Label="Source1" />
            <Edge From="2" To="3" Label="Source2" />
            <Edge From="3" To="4" Label="Source1" />
            <Edge From="4" To="5" Label="Source1" />
          </Edges>
        </Workflow>
      </Expression>
      <Expression xsi:type="MemberSelector">
        <Selector>it</Selector>
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="rx:CombineLatest" />
      </Expression>
      <Expression xsi:type="rx:Condition">
        <Workflow>
          <Nodes>
            <Expression xsi:type="WorkflowInput">
              <Name>Source1</Name>
            </Expression>
            <Expression xsi:type="MemberSelector">
              <Selector>Item3</Selector>
            </Expression>
            <Expression xsi:type="WorkflowOutput" />
          </Nodes>
          <Edges>
            <Edge From="0" To="1" Label="Source1" />
            <Edge From="1" To="2" Label="Source1" />
          </Edges>
        </Workflow>
      </Expression>
      <Expression xsi:type="ipy:PythonTransform">
        <ipy:Script>import clr
clr.AddReference("OpenTK")
from OpenTK import Vector2, Vector3
from System import Array, Tuple
import sys
sys.path.append('C:\\Users\\Experimenter\\Documents\\bonsai_embeddedbehavior\\calibrate\\lib')
import test


@returns(Tuple[Array[Vector3],str])
def process(value):

  OpenGLDotList=[] #list of dots to draw
  posList=[]
  dotStr=[]



  for well in value.Item1:
    xMax=value.Item6.Width #2048.0 #relevant for openGL scaling
    yMax=value.Item6.Height #1280.0

    x = well.Item1
    y = well.Item2

    dsx=value.Item5.Item1
    dshx=value.Item5.Item2
    dsy=value.Item5.Item3
    dshy=value.Item5.Item4
    
    xt=x*dsx+dshx
    yt=y*dsy+dshy

    xGL=test.toGL(xt,xMax)
    yGL=-test.toGL(yt,yMax)

    OpenGLDotList.append(Vector3(xGL,yGL,value.Item5.Item5))
    dotStr.append(str(xGL))
    dotStr.append(str(yGL))
    transformationMatrixString=value.Item4
    if len(transformationMatrixString)&gt;1:
      #print x,y
      x,y=test.transf(x,y,transformationMatrixString)
      #print x,y
      xGL=test.toGL(x,xMax)
      yGL=-test.toGL(y,yMax)
      OpenGLDotList.append(Vector3(xGL,yGL,value.Item5.Item6))
      dotStr.append(str(xGL))
      dotStr.append(str(yGL))

    

  OpenGLDotArray=Array[Vector3](OpenGLDotList)
  return Tuple.Create(OpenGLDotArray," ".join(dotStr))</ipy:Script>
      </Expression>
      <Expression xsi:type="MemberSelector">
        <Selector>Item1</Selector>
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="gl:DrawArrays">
          <gl:ShaderName>Particles</gl:ShaderName>
          <gl:DrawMode>Points</gl:DrawMode>
          <gl:Usage>DynamicDraw</gl:Usage>
          <gl:VertexAttributes>
            <gl:VertexAttributeMapping>
              <gl:Size>3</gl:Size>
              <gl:Normalized>false</gl:Normalized>
              <gl:Type>Float</gl:Type>
            </gl:VertexAttributeMapping>
          </gl:VertexAttributes>
        </Combinator>
      </Expression>
      <Expression xsi:type="MemberSelector">
        <Selector>Item2</Selector>
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="gl:CreateWindow">
          <gl:Width>1280</gl:Width>
          <gl:Height>800</gl:Height>
          <gl:VSync>On</gl:VSync>
          <gl:SwapSync>false</gl:SwapSync>
          <gl:ClearColor>Transparent</gl:ClearColor>
          <gl:ClearMask>DepthBufferBit ColorBufferBit</gl:ClearMask>
          <gl:CursorVisible>true</gl:CursorVisible>
          <gl:Location xsi:nil="true" />
          <gl:WindowBorder>Resizable</gl:WindowBorder>
          <gl:WindowState>Fullscreen</gl:WindowState>
          <gl:DisplayDevice>Second</gl:DisplayDevice>
          <gl:TargetRenderFrequency>60</gl:TargetRenderFrequency>
          <gl:TargetUpdateFrequency>60</gl:TargetUpdateFrequency>
          <gl:RenderState>
            <gl:StateConfiguration xsi:type="gl:EnableState">
              <gl:Capability>Blend</gl:Capability>
            </gl:StateConfiguration>
            <gl:StateConfiguration xsi:type="gl:BlendFunctionState">
              <gl:SourceFactor>SrcAlpha</gl:SourceFactor>
              <gl:DestinationFactor>OneMinusSrcAlpha</gl:DestinationFactor>
            </gl:StateConfiguration>
            <gl:StateConfiguration xsi:type="gl:EnableState">
              <gl:Capability>PointSprite</gl:Capability>
            </gl:StateConfiguration>
            <gl:StateConfiguration xsi:type="gl:EnableState">
              <gl:Capability>ProgramPointSize</gl:Capability>
            </gl:StateConfiguration>
          </gl:RenderState>
          <gl:GraphicsMode>
            <gl:ColorFormat>
              <gl:Red>8</gl:Red>
              <gl:Green>8</gl:Green>
              <gl:Blue>8</gl:Blue>
              <gl:Alpha>8</gl:Alpha>
            </gl:ColorFormat>
            <gl:Depth>16</gl:Depth>
            <gl:Stencil>0</gl:Stencil>
            <gl:Samples>0</gl:Samples>
            <gl:AccumulatorFormat>
              <gl:Red>0</gl:Red>
              <gl:Green>0</gl:Green>
              <gl:Blue>0</gl:Blue>
              <gl:Alpha>0</gl:Alpha>
            </gl:AccumulatorFormat>
            <gl:Buffers>2</gl:Buffers>
            <gl:Stereo>false</gl:Stereo>
          </gl:GraphicsMode>
        </Combinator>
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="gl:ShaderResources">
          <gl:Shaders>
            <gl:ShaderConfiguration xsi:type="gl:Material">
              <gl:Name>Particles</gl:Name>
              <gl:RenderState />
              <gl:ShaderUniforms>
                <gl:UniformConfiguration xsi:type="gl:Vec4Uniform">
                  <gl:Name>color</gl:Name>
                  <gl:Value>
                    <gl:X>0</gl:X>
                    <gl:Y>0</gl:Y>
                    <gl:Z>0</gl:Z>
                    <gl:W>1</gl:W>
                  </gl:Value>
                </gl:UniformConfiguration>
              </gl:ShaderUniforms>
              <gl:BufferBindings />
              <gl:FramebufferAttachments />
              <gl:VertexShader>particles.vert</gl:VertexShader>
              <gl:FragmentShader>particles.frag</gl:FragmentShader>
            </gl:ShaderConfiguration>
          </gl:Shaders>
        </Combinator>
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="res:LoadResources" />
      </Expression>
    </Nodes>
    <Edges>
      <Edge From="0" To="1" Label="Source1" />
      <Edge From="0" To="24" Label="Source6" />
      <Edge From="1" To="2" Label="Source1" />
      <Edge From="2" To="3" Label="Source1" />
      <Edge From="3" To="4" Label="Source1" />
      <Edge From="3" To="20" Label="Source1" />
      <Edge From="4" To="9" Label="Source1" />
      <Edge From="5" To="6" Label="Source1" />
      <Edge From="6" To="7" Label="Source1" />
      <Edge From="7" To="9" Label="Source2" />
      <Edge From="7" To="24" Label="Source1" />
      <Edge From="8" To="9" Label="Source3" />
      <Edge From="8" To="24" Label="Source5" />
      <Edge From="9" To="10" Label="Source1" />
      <Edge From="10" To="15" Label="Source1" />
      <Edge From="10" To="23" Label="Source1" />
      <Edge From="11" To="12" Label="Source1" />
      <Edge From="12" To="13" Label="Source1" />
      <Edge From="13" To="14" Label="Source1" />
      <Edge From="14" To="15" Label="Source2" />
      <Edge From="15" To="16" Label="Source1" />
      <Edge From="16" To="17" Label="Source1" />
      <Edge From="17" To="18" Label="Source1" />
      <Edge From="18" To="19" Label="Source1" />
      <Edge From="21" To="24" Label="Source2" />
      <Edge From="22" To="24" Label="Source3" />
      <Edge From="23" To="24" Label="Source4" />
      <Edge From="24" To="25" Label="Source1" />
      <Edge From="25" To="26" Label="Source1" />
      <Edge From="26" To="27" Label="Source1" />
      <Edge From="26" To="29" Label="Source1" />
      <Edge From="27" To="28" Label="Source1" />
      <Edge From="30" To="31" Label="Source1" />
      <Edge From="31" To="32" Label="Source1" />
    </Edges>
  </Workflow>
</WorkflowBuilder>